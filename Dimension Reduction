#DIMENSION REDUCTION
#selecting Quantitative variables from dataset
raqData=Filter(is.numeric, student)
colnames(raqData)=c(1:29)

#loading packages
if(length(not_installed)) install.packages(not_installed, repos = "http://cran.us.r-project.org") 
library(psych)
library(REdaS)
library(Hmisc)
library(corrplot)
library(ggcorrplot)
library(factoextra)library(nFactors)

#Step 1: Screen the correlation matrix
raqMatrix<-cor(raqData)
round(raqMatrix, 2)

Hmisc::rcorr(as.matrix(raqData))

#Using ggcorrplot
p.mat <- ggcorrplot::cor_pmat(raqData)
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for student data")

#Visualization using numbers
corrplot::corrplot(raqMatrix, method="number")

#Step 2: Check if data is suitable - look at the relevant Statistics ###Bartlettâ€™s test
psych::cortest.bartlett(raqData)

psych::cortest.bartlett(raqMatrix, n=nrow(raqData))

REdaS::KMOS(raqData)

#Determinant :
det(raqMatrix)

#Step 3: Do the Dimension Reduction (PRINCIPAL COMPONENTS ANALYSIS)
pc1 <-  principal(raqData, nfactors = 29, rotate = "none")
pc1 <-  principal(raqData, nfactors = length(raqData), rotate = "none")
pc1#output all details of the PCA

#Step 4: Decide which components to retain (PRINCIPAL COMPONENTS ANALYSIS)
#Create the scree plot
plot(pc1$values, type = "b") 

#Print the variance explained by each component
pc1$Vaccounted 

#Print the Eigenvalues
pcf=princomp(raqData)
factoextra::get_eigenvalue(pcf)

#Visualize the Eigenvalues
factoextra::fviz_eig(pcf, addlabels = TRUE, ylim = c(0, 50))

factoextra::fviz_pca_var(pcf, col.var = "cos2",
                         gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), 
                         repel = TRUE # Avoid text overlapping
)

#Print the loadings above the level of 0.3
psych::print.psych(pc1, cut = 0.3, sort = TRUE)

#create a diagram showing the components and how the manifest variables load
fa.diagram(pc1) 

#Show the loadings of variables on to components
fa.sort(pc1$loading)

#Output the communalities of variables across components (will be one for PCA since all the variance is used)
pc1$communality 

#Visualize contribution of variables to each component
var <- factoextra::get_pca_var(pcf)
corrplot::corrplot(var$contrib, is.corr=FALSE) 

# Contributions of variables to PC1
factoextra::fviz_contrib(pcf, choice = "var", axes = 1, top = 10)

# Contributions of variables to PC2
factoextra::fviz_contrib(pcf, choice = "var", axes = 2, top = 10)

#Step 5: Apply rotation

#Apply rotation to try to refine the component structure
pc2 <-  principal(raqData, nfactors = 4, rotate = "varimax")#Extracting 4 factors
#output the components
psych::print.psych(pc2, cut = 0.3, sort = TRUE)

#output the communalities
pc2$communality

#Step 3: Do the dimension reduction and Step 4: Decide which factors/components to retain (FACTOR ANALYSIS)

#Factor Analysis - the default here is principal axis factoring fm=pa
#If we know our data going in is normally distributed we use maximum likelihood
facsol <- psych::fa(raqMatrix, nfactors=4, obs=NA, n.iter=1, rotate="varimax", fm="pa")

#Create your scree plot
plot(facsol$values, type = "b") #scree plot


#Print the Variance accounted for by each factor/component
facsol$Vaccounted

#Output the Eigenvalues
facsol$values 

#Print the components with loadings
psych::print.psych(facsol,cut=0.3, sort=TRUE)

#Print sorted list of loadings
fa.sort(facsol$loading)

#create a diagram showing the factors and how the manifest variables load
fa.diagram(facsol)
ggsave("plot1.png", width=6, height=3, dpi=1000)

#Step 5: Apply rotation
#Apply rotation to try to refine the component structure
facsolrot <-  principal(raqMatrix, rotate = "varimax")
#output the components
psych::print.psych(facsolrot, cut = 0.3, sort = TRUE)

#output the communalities
facsolrot$communality

#Step 6: Reliability Analysis
#If you know that variables are grouped, test each group as a separate scale
col1<-raqData[,c(12,25)]
col2 <- raqData[, c(20,7,22,9,21,8)]
col3 <- raqData[, c(11,24,23,10,18,5)]
col4 <- raqData[, c(14,15,16,27,28,29,6,2,19,3)]

#Output our Cronbach Alpha values
psych::alpha(col1)
psych::alpha(col2)
psych::alpha(col3)
psych::alpha(col4)
